// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  passwordHash String  @map("password_hash")
  name        String
  role        UserRole @default(SITE_MANAGER)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  sites            Site[]
  contentDrafts    ContentDraft[]
  aiSettings       AISettings?
  aiUsage          AIUsage[]
  customModels     CustomModel[]
  imageProviders   ImageProvider[]
  imageUsageLogs   ImageUsageLog[]
  imageUrlFilters  ImageUrlFilter[]
  rssFeeds         RSSFeed[]
  automationJobs   AutomationJob[]
  researchSettings ResearchSettings?

  @@map("users")
}

model Site {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  name             String
  url              String
  wpUsername       String    @map("wp_username")
  wpPasswordHash   String    @map("wp_password_hash")
  healthStatus     String    @default("{}") @map("health_status")
  lastSync         DateTime? @map("last_sync")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentDrafts  ContentDraft[]
  contentSync    ContentSync[]
  categories     Category[]
  automationJobs AutomationJob[]

  @@map("sites")
}

model ContentDraft {
  id             String        @id @default(cuid())
  userId         String        @map("user_id")
  siteId         String        @map("site_id")
  type           ContentType
  title          String
  content        String?
  excerpt        String?
  categoryId     String?       @map("category_id")
  featuredImage  String?       @map("featured_image")
  tags           String?
  metadata       String        @default("{}")
  status         ContentStatus @default(DRAFT)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  site     Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])

  @@map("content_drafts")
}

model ContentSync {
  id         String      @id @default(cuid())
  siteId     String      @map("site_id")
  wpPostId   String      @map("wp_post_id")
  type       ContentType
  title      String
  categories String      @default("[]")
  wpModified DateTime?   @map("wp_modified")
  lastSync   DateTime    @default(now()) @map("last_sync")

  // Relations
  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, wpPostId])
  @@map("content_sync")
}

model Category {
  id           String    @id @default(cuid())
  siteId       String    @map("site_id")
  wpCategoryId String    @map("wp_category_id")
  name         String
  slug         String
  description  String?
  parentId     String?   @map("parent_id")
  createdAt    DateTime  @default(now()) @map("created_at")

  // Relations
  site          Site           @relation(fields: [siteId], references: [id], onDelete: Cascade)
  parent        Category?      @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[]     @relation("CategoryHierarchy")
  contentDrafts ContentDraft[]

  @@unique([siteId, wpCategoryId])
  @@map("categories")
}

// AI Models
model AISettings {
  id                  String   @id @default(cuid())
  userId              String   @unique @map("user_id")
  openaiApiKey        String?  @map("openai_api_key") // Encrypted
  anthropicApiKey     String?  @map("anthropic_api_key") // Encrypted
  defaultProvider     String   @default("openai") @map("default_provider") // 'openai' or 'anthropic'
  monthlyTokenLimit   Int      @default(100000) @map("monthly_token_limit")

  // Model selections for each feature
  enhanceModel        String   @default("gpt-3.5-turbo") @map("enhance_model")
  generateModel       String   @default("gpt-4-turbo") @map("generate_model")
  summarizeModel      String   @default("gpt-3.5-turbo") @map("summarize_model")
  seoMetaModel        String   @default("gpt-3.5-turbo") @map("seo_meta_model")
  titlesModel         String   @default("gpt-3.5-turbo") @map("titles_model")
  toneModel           String   @default("gpt-3.5-turbo") @map("tone_model")
  keywordsModel       String   @default("gpt-3.5-turbo") @map("keywords_model")
  translateModel      String   @default("gpt-4-turbo") @map("translate_model")
  altTextModel        String   @default("gpt-3.5-turbo") @map("alt_text_model")
  outlineModel        String   @default("gpt-4-turbo") @map("outline_model")
  metadataModel       String   @default("gpt-3.5-turbo") @map("metadata_model")

  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_settings")
}

model AIUsage {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  feature       String   // 'enhance', 'generate', 'summarize', etc.
  provider      String   // 'openai', 'anthropic', 'custom'
  model         String   // 'gpt-3.5-turbo', 'claude-3-sonnet', etc.
  tokensUsed    Int      @map("tokens_used")
  cost          Float    // Cost in USD
  success       Boolean  @default(true)
  errorMessage  String?  @map("error_message")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("ai_usage")
}

model CustomModel {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  name          String   // Display name (e.g., "My Custom GPT")
  identifier    String   // Model identifier (e.g., "custom-gpt-4")
  provider      String   @default("custom") // 'custom', 'openai', 'anthropic'
  endpoint      String   // API endpoint URL
  apiKey        String   @map("api_key") // Encrypted
  temperature   Float    @default(0.7)
  maxTokens     Int      @default(2000) @map("max_tokens")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, identifier])
  @@map("custom_models")
}

// Image Providers
model ImageProvider {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  provider    String   // 'pexels', 'serper', 'openverse'
  apiKey      String   @map("api_key") // Encrypted
  isEnabled   Boolean  @default(true) @map("is_enabled")

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([userId, provider])
  @@index([userId])
  @@map("image_providers")
}

model ImageUsageLog {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  provider    String
  query       String
  imageUrl    String   @map("image_url")

  createdAt   DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([createdAt])
  @@map("image_usage_logs")
}

model ImageUrlFilter {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  pattern     String   // URL pattern to filter (e.g., "shutterstock.com", "gettyimages.com")
  description String?  // Optional description of why this pattern is filtered
  isActive    Boolean  @default(true) @map("is_active")

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@map("image_url_filters")
}

// Article Automation Models
model RSSFeed {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String   // User-friendly name for the feed
  url         String   // RSS feed URL
  isActive    Boolean  @default(true) @map("is_active")
  lastFetched DateTime? @map("last_fetched")

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  automationJobs AutomationJob[]

  @@index([userId])
  @@map("rss_feeds")
}

model AutomationJob {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  siteId          String   @map("site_id")
  site            Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  sourceType      AutomationSourceType @map("source_type") // 'rss' or 'topic'
  rssFeedId       String?  @map("rss_feed_id")
  rssFeed         RSSFeed? @relation(fields: [rssFeedId], references: [id], onDelete: SetNull)

  topic           String?  // For manual topic input
  sourceUrl       String?  @map("source_url") // Original RSS article URL if from RSS
  sourceTitle     String?  @map("source_title") // Original RSS article title

  status          AutomationStatus @default(PENDING)

  // Generated article data
  generatedTitle  String?  @map("generated_title")
  generatedContent String? @map("generated_content")
  generatedExcerpt String? @map("generated_excerpt")

  // Generated metadata
  categories      String?  @map("categories") // JSON array of category names
  tags            String?  @map("tags") // JSON array of tag names
  seoDescription  String?  @map("seo_description")
  seoKeywords     String?  @map("seo_keywords") // JSON array of keywords

  // Generated images
  featuredImageUrl String? @map("featured_image_url")
  inlineImages    String?  @map("inline_images") // JSON array of image objects

  // WordPress publishing data
  wpPostId        Int?     @map("wp_post_id")
  publishedAt     DateTime? @map("published_at")

  // Error tracking
  errorMessage    String?  @map("error_message")

  // AI usage tracking
  aiModel         String?  @map("ai_model")
  tokensUsed      Int?     @map("tokens_used")
  aiCost          Float?   @map("ai_cost")

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([siteId])
  @@index([status])
  @@index([createdAt])
  @@map("automation_jobs")
}

// Topic Research Settings
model ResearchSettings {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  apiUrl      String   @map("api_url")
  bearerToken String?  @map("bearer_token") // Encrypted
  isEnabled   Boolean  @default(true) @map("is_enabled")

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("research_settings")
}

// Enums
enum UserRole {
  SITE_MANAGER
  CONTENT_EDITOR
  VIEWER
}

enum ContentType {
  POST
  PAGE
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
}

enum AutomationSourceType {
  RSS
  TOPIC
}

enum AutomationStatus {
  PENDING
  GENERATING
  GENERATED
  PUBLISHING
  PUBLISHED
  FAILED
}
